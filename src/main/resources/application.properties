# ---------------------------
spring.mandatory-file-encoding=UTF-8

# === Spring Profiles ===
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}

# === Server config ===
server.port=${PORT:8100}
spring.application.name=ai-service

# === Database Configuration ===
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5450}/${DB_NAME:ai_service_db}
spring.datasource.username=${DB_USERNAME:user}
spring.datasource.password=${DB_PASSWORD:pass}

# === JPA / Hibernate ===
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# === Logging (peut etre adapte) ===
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.cabinet360.ai=DEBUG

# === Freemarker Configuration (Hugging Face) ===
ai.provider=${AI_PROVIDER:huggingface}
ai.huggingface.model=${AI_MODEL:microsoft/DialoGPT-medium}
ai.huggingface.medical.model=${AI_MEDICAL_MODEL:dmis-lab/biobert-base-cased-v1.1}
ai.fallback.enabled=${AI_FALLBACK_ENABLED:true}

#  Alternative Free AI Providers (Optional)
# === Google Gemini (Free tier) ===
gemini.api.key=${GEMINI_API_KEY:AIzaSyAfUL5Jof5GuPsEGYVoqNvd8N8huMMfX-Q}
gemini.model=${GEMINI_MODEL:gemini-pro}

# === Ollama (Local) ===
ollama.api.url=${OLLAMA_URL:http://localhost:11434}
ollama.model=${OLLAMA_MODEL:medalpaca}

# === OpenAI Configuration ===
openai.api.key=${OPENAI_API_KEY:dummy-dev-key}
openai.model=${OPENAI_MODEL:gpt-3.5-turbo}
openai.max.tokens=${OPENAI_MAX_TOKENS:1000}

# === PubMed API Configuration ===
pubmed.api.base.url=https://eutils.ncbi.nlm.nih.gov/entrez/eutils
pubmed.api.key=${PUBMED_API_KEY:30db509f39b65180d2fec965ecf71e55dc09}
pubmed.max.results=${PUBMED_MAX_RESULTS:10}

# === JWT Configuration (pour validation de token) ===
jwt.secret=${JWT_SECRET:cabinet360supersecurekeymustbeatleast32chars!}

# === External Services URLs ===
auth.service.url=${AUTH_SERVICE_URL:http://auth-service:8080}
core.service.url=${CORE_SERVICE_URL:http://core-service:8081}

# === Cache (optionnel) ===
spring.cache.type=simple
spring.cache.cache-names=ai-responses,article-summaries,pubmed-searches

# === Rate Limiting (to prevent abuse of free APIs) ===
rate.limit.requests.per.minute=${RATE_LIMIT_RPM:30}
rate.limit.enabled=${RATE_LIMIT_ENABLED:true}

# === Async Processing (for long-running tasks) ===
spring.task.execution.pool.core-size=4
spring.task.execution.pool.max-size=8
spring.task.execution.pool.queue-capacity=100

# === WebClient Configuration (for external API calls) ===
spring.webflux.multipart.max-in-memory-size=1MB

# === Dev mode (optionnel pour logs/demo) ===
dev.mode=${DEV_MODE:false}

# === Health Check Configuration ===
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized

# === Free AI Service Specific Settings ===
ai.timeout.seconds=${AI_TIMEOUT:30}
ai.retry.max-attempts=${AI_RETRY_MAX:3}
ai.retry.delay.seconds=${AI_RETRY_DELAY:2}

# === Medical AI Prompts (optional) ===
ai.medical.system.prompt=You are a helpful medical AI assistant. Provide evidence-based medical information. Always recommend consulting healthcare professionals for medical decisions.
ai.medical.disclaimer=Please consult with a healthcare professional for personalized medical advice.

# === PubMed Integration (optional) ===
pubmed.cache.ttl.hours=${PUBMED_CACHE_TTL:24}
pubmed.summary.max.length=${PUBMED_SUMMARY_MAX_LENGTH:500}

# === Security Settings ===
spring.security.require-ssl=${REQUIRE_SSL:false}

# === Error Handling ===
server.error.include-message=always
server.error.include-binding-errors=always