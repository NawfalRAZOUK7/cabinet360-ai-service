# ==========================================
# Cabinet360 AI Service Configuration
# ==========================================

# ---------------------------
# Application Info
# ---------------------------
spring:
  application:
    name: ai-service
  mandatory-file-encoding: UTF-8

  # ---------------------------
  # Profiles
  # ---------------------------
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  # ---------------------------
  # Database Configuration
  # ---------------------------
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:ai_service_db}
    username: ${DB_USERNAME:user}
    password: ${DB_PASSWORD:pass}
    driver-class-name: org.postgresql.Driver

    # Connection Pool (HikariCP)
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # ---------------------------
  # JPA/Hibernate Configuration
  # ---------------------------
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  # ---------------------------
  # Cache Configuration
  # ---------------------------
  cache:
    type: simple
    cache-names: ai-responses,article-summaries,pubmed-searches

  # ---------------------------
  # Security Configuration
  # ---------------------------
  security:
    require-ssl: ${REQUIRE_SSL:false}

  # ---------------------------
  # Async Processing
  # ---------------------------
  task:
    execution:
      pool:
        core-size: 4
        max-size: 8
        queue-capacity: 100

  # ---------------------------
  # WebFlux Configuration
  # ---------------------------
  webflux:
    multipart:
      max-in-memory-size: 1MB

# ---------------------------
# Server Configuration
# ---------------------------
server:
  port: ${PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

# ---------------------------
# Logging Configuration
# ---------------------------
logging:
  level:
    org.hibernate.SQL: ${LOG_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_SQL_PARAMS:TRACE}
    com.cabinet360.ai: DEBUG
    root: ${LOG_LEVEL:INFO}
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss} - %msg%n'
    file: '%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n'
  file:
    name: ${LOG_FILE:./logs/ai-service.log}

# ---------------------------
# JWT Configuration
# ---------------------------
jwt:
  secret: ${JWT_SECRET:cabinet360supersecurekeymustbeatleast32chars!}
  expiration: ${JWT_EXPIRATION:86400000}

# ---------------------------
# External Services
# ---------------------------
auth:
  service:
    url: ${AUTH_SERVICE_URL:http://auth-service:8080}

core:
  service:
    url: ${CORE_SERVICE_URL:http://core-service:8080}

# ---------------------------
# AI Provider Configuration
# ---------------------------
ai:
  provider: ${AI_PROVIDER:gemini}
  huggingface:
    model: ${AI_MODEL:microsoft/DialoGPT-medium}
    medical:
      model: ${AI_MEDICAL_MODEL:dmis-lab/biobert-base-cased-v1.1}
  fallback:
    enabled: ${AI_FALLBACK_ENABLED:true}
  timeout:
    seconds: ${AI_TIMEOUT:30}
  retry:
    max-attempts: ${AI_RETRY_MAX:3}
    delay:
      seconds: ${AI_RETRY_DELAY:2}
  medical:
    system:
      prompt: "You are a helpful medical AI assistant. Provide evidence-based medical information. Always recommend consulting healthcare professionals for medical decisions."
    disclaimer: "Please consult with a healthcare professional for personalized medical advice."

# ---------------------------
# Google Gemini Configuration
# ---------------------------
gemini:
  api:
    key: ${GEMINI_API_KEY:AIzaSyAfUL5Jof5GuPsEGYVoqNvd8N8huMMfX-Q}
  model: ${GEMINI_MODEL:gemini-pro}

# ---------------------------
# Ollama Configuration
# ---------------------------
ollama:
  api:
    url: ${OLLAMA_URL:http://localhost:11434}
  model: ${OLLAMA_MODEL:medalpaca}

# ---------------------------
# OpenAI Configuration
# ---------------------------
openai:
  api:
    key: ${OPENAI_API_KEY:dummy-dev-key}
  model: ${OPENAI_MODEL:gpt-3.5-turbo}
  max:
    tokens: ${OPENAI_MAX_TOKENS:1000}

# ---------------------------
# PubMed API Configuration
# ---------------------------
pubmed:
  api:
    base:
      url: https://eutils.ncbi.nlm.nih.gov/entrez/eutils
    key: ${PUBMED_API_KEY:30db509f39b65180d2fec965ecf71e55dc09}
  max:
    results: ${PUBMED_MAX_RESULTS:10}
  cache:
    ttl:
      hours: ${PUBMED_CACHE_TTL:24}
  summary:
    max:
      length: ${PUBMED_SUMMARY_MAX_LENGTH:500}

# ---------------------------
# Rate Limiting
# ---------------------------
rate:
  limit:
    requests:
      per:
        minute: ${RATE_LIMIT_RPM:30}
    enabled: ${RATE_LIMIT_ENABLED:true}

# ---------------------------
# Development Mode
# ---------------------------
dev:
  mode: ${DEV_MODE:false}

# ---------------------------
# Management/Actuator
# ---------------------------
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
  health:
    defaults:
      enabled: true

---
# ==========================================
# DEVELOPMENT PROFILE
# ==========================================
spring:
  config:
    activate:
      on-profile: dev

  # Development JPA
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

# Development Logging
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.cabinet360.ai: DEBUG
    root: DEBUG

---
# ==========================================
# PRODUCTION PROFILE
# ==========================================
spring:
  config:
    activate:
      on-profile: prod

  # Production Database
  datasource:
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5

  # Production JPA
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

# Production Logging
logging:
  level:
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    com.cabinet360.ai: INFO
    root: WARN
  file:
    name: /var/log/cabinet360/ai-service.log